import os
import random
import time
import pygame
from PPlay.window import *
from PPlay.sprite import *
from PPlay.gameimage import *
from PPlay.mouse import *

#Configurações Iniciais
WIDTH, HEIGHT = 1280, 720
BG_COLOR = (0, 34, 53)  # Cor de fundo azul escuro
FPS = 60

#Funções Utilitárias

def verifica_arquivo(path):
    """Verifica se um arquivo de asset existe. Se não, exibe um erro e fecha o jogo."""
    if not os.path.isfile(path):
        print(f"ERRO: Arquivo não encontrado: {path}")
        #Tenta desenhar na janela se ela já existir
        if 'janela' in globals():
            janela.draw_text(f"ERRO: {path}", 100, 100, size=30, color=(255, 0, 0))
            janela.update()
            time.sleep(3)
        exit(1)

def load_sprite(path):
    """Carrega um sprite a partir de um caminho, verificando se o arquivo existe."""
    verifica_arquivo(path)
    return Sprite(path)

def load_img(path):
    """Carrega uma imagem de jogo a partir de um caminho, verificando se o arquivo existe."""
    verifica_arquivo(path)
    return GameImage(path)

#Classe Principal do Jogo

class Game:
    def __init__(self):
        """Inicializa a janela, o mouse, o teclado e o estado geral do jogo."""
        self.janela = Window(WIDTH, HEIGHT)
        self.janela.set_title("DNA MATCH")
        self.janela.set_background_color(BG_COLOR)
        self.mouse = Mouse()
        self.teclado = self.janela.get_keyboard()

        self.tela_atual = "menu"  #Controla qual tela está ativa
        self.rodando = True
        self.clicou_botao = False #Trava para evitar cliques duplos em botões

        #Assets do Jogo
        self.assets = self.carregar_assets()
        self.posicionar_botoes()

        #Estado do Jogo
        self.modo_jogo = None
        self.pontuacao = 0
        self.combo = 0
        self.fitas = []
        self.fita_atual = 0
        self.sprites_animando = []
        self.clicou_base = False
        self.pontuacoes_aplicadas = False
        self.tempo_fim = 0
        self.codons_bkp = []

        #Curiosidades
        self.curiosidades = [
            "O RNA usa Uracila (U) no lugar da Timina (T)!",
            "A dupla hélice do DNA foi descoberta em 1953.",
            "O códon de início na tradução de proteínas é o AUG.",
            "O genoma humano tem cerca de 3 bilhões de pares de bases.",
            "Os códons de parada que finalizam a tradução são UAA, UAG e UGA.",
            "As bases são complementares: A pareia com T (ou U no RNA) e C pareia com G.",
            "Cada fita de DNA é uma sequência de unidades chamadas nucleotídeos.",
            "Uma mutação é qualquer alteração na sequência de DNA.",
        ]
        self.curiosidade_atual = random.choice(self.curiosidades)
        self.curiosidade_timer = 0

        #FPS Counter
        self.frame_count = 0
        self.timer = 0
        self.fps = 0

    def carregar_assets(self):
        """Carrega todas as imagens e sprites necessários para o jogo."""
        assets = {
            "fundo": load_img("assets/fundo.png"),
            "gamename": load_img("assets/gamename.png"),
            "jogar_btn": load_sprite("assets/jogar.png"),
            "nivel_btn": load_sprite("assets/nivel.png"),
            "facil_btn": load_sprite("assets/facil.png"),
            "dificil_btn": load_sprite("assets/dificil.png"),
            "regras_btn": load_sprite("assets/regras.png"),
            "sair_btn": load_sprite("assets/sair.png"),
            "regras_back_btn": load_sprite("assets/voltar.png"), #Botão 'Sair' específico para a tela de regras
            "fitas_img": {
                "fácil": "assets/fita9.png",
                "difícil": "assets/fita12.png",
                "rna": "assets/fitaRNA.png" #Nova fita para RNA
            },
            "base_types": {
                "dna": ["A", "T", "C", "G"],
                "rna": ["A", "U", "C", "G"]
            }
        }
        return assets

    def nova_base_sprite(self, base, slot=False):
        """Cria um sprite para uma base nitrogenada, com sufixo opcional para slot."""
        nome = f"assets/{base}{'_slot' if slot else ''}.png"
        verifica_arquivo(nome)
        return Sprite(nome)

    def posicionar_botoes(self):
        """Define a posição inicial dos botões nos menus."""
        #Botões do Menu Principal
        self.btns_menu = [self.assets["jogar_btn"], self.assets["nivel_btn"], self.assets["regras_btn"], self.assets["sair_btn"]]
        btns_menu_y = [280, 340, 400, 460]
        for btn, y in zip(self.btns_menu, btns_menu_y):
            btn.set_position((WIDTH - btn.width) / 2, y)

        #Botões da Tela de Nível
        self.btns_nivel = [self.assets["facil_btn"], self.assets["dificil_btn"]]
        btns_nivel_y = [300, 360]
        for btn, y in zip(self.btns_nivel, btns_nivel_y):
            btn.set_position((WIDTH - btn.width) / 2, y)

        #Botão de Voltar na Tela de Regras
        self.regras_back_btn = self.assets["regras_back_btn"]
        self.regras_back_btn.set_position(60, HEIGHT - 90)

    def resetar_jogo(self):
        """Reseta todas as variáveis de estado do jogo para voltar ao menu principal."""
        self.tela_atual = "menu"
        self.modo_jogo = None
        self.sprites_animando.clear()
        self.fitas.clear()
        self.fita_atual = 0
        self.clicou_base = False
        self.clicou_botao = False
        self.pontuacao = 0
        self.combo = 0
        self.pontuacoes_aplicadas = False
        self.tempo_fim = 0
        self.codons_bkp = []
        self.curiosidade_atual = random.choice(self.curiosidades)
        self.curiosidade_timer = 0
        if hasattr(self, "score_salvo"):
            del self.score_salvo

    #Lógica de Ranking
    def salvar_score(self):
        """Salva a pontuação final do jogador no arquivo SCORE.txt."""
        if not hasattr(self, "score_salvo"):
            with open("SCORE.txt", "a") as f:
                f.write(f"Jogador: {self.pontuacao}\n")
            self.score_salvo = True

    def ler_ranking(self):
        """Lê o arquivo de scores e retorna os 5 melhores."""
        if not os.path.exists("SCORE.txt"):
            return []
        with open("SCORE.txt") as f:
            linhas = [l.strip() for l in f if l.strip()]
        pontuacoes = []
        for linha in linhas:
            if ":" in linha:
                try:
                    nome, pts_str = linha.split(":", 1)
                    pontuacoes.append((nome.strip(), int(pts_str.strip())))
                except (ValueError, IndexError):
                    continue #Ignora linhas mal formatadas
        return sorted(pontuacoes, key=lambda x: -x[1])[:5] #Retorna o top 5

    #Lógica de Inicialização do Jogo
    def inicializa_slots(self):
        """Prepara as fitas e os slots de DNA/RNA para o início de uma partida."""
        self.sprites_animando.clear()
        self.fita_atual = 0
        self.fitas = []
        self.pontuacoes_aplicadas = False
        self.pontuacao = 0
        self.combo = 0
        
        num_fitas = 2 if self.modo_jogo == "fácil" else 3
        
        #Pega a altura de uma fita para calcular o posicionamento vertical
        sample_fita_path = self.assets["fitas_img"]["fácil"]
        fita_height = load_sprite(sample_fita_path).height
        gap_entre_fitas = 60 #Espaçamento vertical entre as fitas
        
        #Calcula a altura total do bloco de fitas para centralizá-lo
        total_fitas_height = (num_fitas * fita_height) + ((num_fitas - 1) * gap_entre_fitas)
        y_inicial = (self.janela.height - total_fitas_height) / 2 - 50 #Começa um pouco mais para cima do centro

        for linha in range(num_fitas):
            fita_sprite_path = ""
            bases_disponiveis = []

            if self.modo_jogo == "fácil":
                fita_sprite_path = self.assets["fitas_img"]["fácil"]
                bases_disponiveis = self.assets["base_types"]["dna"]
            else: #modo_jogo == "difícil"
                if linha < 2: #Fitas 1 e 2 (DNA)
                    fita_sprite_path = self.assets["fitas_img"]["difícil"]
                    bases_disponiveis = self.assets["base_types"]["dna"]
                else: #Fita 3 (RNA)
                    fita_sprite_path = self.assets["fitas_img"]["rna"]
                    bases_disponiveis = self.assets["base_types"]["rna"]

            fita_sprite = load_sprite(fita_sprite_path)
            
            #Calcula a posição Y de cada fita
            current_y = y_inicial + linha * (fita_height + gap_entre_fitas)
            fita_sprite.set_position(self.janela.width, current_y)
            
            slot_width = fita_sprite.width / (9 if self.modo_jogo == "fácil" else 12)

            slots = []
            for j in range(9 if self.modo_jogo == "fácil" else 12):
                slots.append({
                    "x": fita_sprite.x + j * slot_width, "y": current_y, "w": slot_width,
                    "sprite": None, "base": None, "preenchido": False, "animando": False,
                    "flash": 0, "correto": None
                })
            
            self.fitas.append({
                "sprite": fita_sprite, 
                "slots": slots, 
                "ativa": True,
                "bases_disponiveis": bases_disponiveis
            })

    #Lógica de Telas (Update e Draw)

    def update(self):
        """Chama a função de atualização da tela atual."""
        if self.tela_atual == "menu": self.update_menu()
        elif self.tela_atual == "nivel": self.update_nivel()
        elif self.tela_atual == "regras": self.update_regras()
        elif self.tela_atual == "jogo": self.update_jogo()
        elif self.tela_atual == "fim": self.update_fim()
        
        #Atualiza o contador de FPS
        self.timer += self.janela.delta_time()
        self.frame_count += 1
        if self.timer >= 1:
            self.fps = self.frame_count
            self.frame_count = 0
            self.timer = 0

    def draw(self):
        """Chama a função de desenho da tela atual."""
        self.assets["fundo"].draw()
        if self.tela_atual == "menu": self.draw_menu()
        elif self.tela_atual == "nivel": self.draw_nivel()
        elif self.tela_atual == "regras": self.draw_regras()
        elif self.tela_atual == "jogo": self.draw_jogo()
        elif self.tela_atual == "fim": self.draw_fim()
        self.janela.update()

    #Tela de Menu
    def update_menu(self):
        if self.mouse.is_button_pressed(1) and not self.clicou_botao:
            if self.mouse.is_over_object(self.assets["jogar_btn"]):
                self.clicou_botao = True
                self.tela_atual = "nivel" if self.modo_jogo is None else "jogo"
                if self.tela_atual == "jogo": self.inicializa_slots()
            elif self.mouse.is_over_object(self.assets["nivel_btn"]):
                self.clicou_botao = True
                self.tela_atual = "nivel"
            elif self.mouse.is_over_object(self.assets["regras_btn"]):
                self.clicou_botao = True
                self.tela_atual = "regras"
            elif self.mouse.is_over_object(self.assets["sair_btn"]):
                self.rodando = False
        
        if not self.mouse.is_button_pressed(1):
            self.clicou_botao = False

        #Atualiza a curiosidade
        self.curiosidade_timer -= self.janela.delta_time()
        if self.curiosidade_timer <= 0:
            self.curiosidade_atual = random.choice(self.curiosidades)
            self.curiosidade_timer = 5 #Troca a cada 5 segundos

    def draw_menu(self):
        self.assets["gamename"].set_position((WIDTH - self.assets["gamename"].width) / 2, 100)
        self.assets["gamename"].draw()
        
        for btn in self.btns_menu:
            btn.draw()
            if self.mouse.is_over_object(btn):
                pygame.draw.rect(self.janela.screen, (255, 255, 0), (btn.x, btn.y, btn.width, btn.height), 3)
        
        #Ranking
        ranking = self.ler_ranking()
        self.janela.draw_text("TOP 5 RANKING:", 60, 500, size=25, color=(0, 255, 255), bold=True)
        for i, (nome, score) in enumerate(ranking):
            self.janela.draw_text(f"{i + 1}. {nome} - {score}", 60, 535 + i * 28, size=22, color=(200, 200, 200))

        #Curiosidade
        self.janela.draw_text(f"Dica: {self.curiosidade_atual}", 80, HEIGHT - 40, size=22, color=(180, 180, 255))

    #Tela de Nível
    def update_nivel(self):
        if self.mouse.is_button_pressed(1) and not self.clicou_botao:
            if self.mouse.is_over_object(self.assets["facil_btn"]):
                self.clicou_botao = True
                self.modo_jogo = "fácil"
                self.inicializa_slots()
                self.tela_atual = "jogo"
            elif self.mouse.is_over_object(self.assets["dificil_btn"]):
                self.clicou_botao = True
                self.modo_jogo = "difícil"
                self.inicializa_slots()
                self.tela_atual = "jogo"

        if not self.mouse.is_button_pressed(1):
            self.clicou_botao = False

    def draw_nivel(self):
        self.janela.draw_text("ESCOLHA O NÍVEL", WIDTH / 2 - 200, 150, size=40, color=(0, 255, 255), bold=True)
        for btn in self.btns_nivel:
            btn.draw()
            if self.mouse.is_over_object(btn):
                pygame.draw.rect(self.janela.screen, (120, 255, 180), (btn.x, btn.y, btn.width, btn.height), 3)

    #Tela de Regras
    def update_regras(self):
        if (self.mouse.is_over_object(self.regras_back_btn) and self.mouse.is_button_pressed(1) and not self.clicou_botao) or self.teclado.key_pressed("ESC"):
            self.clicou_botao = True
            self.tela_atual = "menu"
        
        if not self.mouse.is_button_pressed(1):
            self.clicou_botao = False

    def draw_regras(self):
        self.janela.draw_text("Como jogar:", 80, 100, size=30, color=(180,255,255))
        regras_texto = [
        ("Combine as bases do DNA e RNA conforme a fita avança!", 150),
        ("Modo Fácil: 2 fitas (só DNA) | Modo Difícil: 3 fitas (DNA + RNA)", 190),
        ("As bases se complementam da seguinte forma:", 270),
        ("  - A é complementar de T nas fitas de DNA", 310),
        ("  - A é complementar de U na fita de RNA", 350),
        ("  - C é complementar de G em todos os casos", 390),
        ("Bônus de início: códon 'AUG'", 430),
        ("Códons de parada: UAA, UAG, ou UGA", 470),
        ("Clique nas bases para preencher os espaços!", 510),
        ("Pressione ESC ou clique em 'Sair' para voltar", 550)
    ]

        for texto, y in regras_texto:
            self.janela.draw_text(texto, 80, y, size=28, color=(220,220,255))

        self.regras_back_btn.draw()
        if self.mouse.is_over_object(self.regras_back_btn):
            pygame.draw.rect(self.janela.screen, (255,255,0), (self.regras_back_btn.x, self.regras_back_btn.y, self.regras_back_btn.width, self.regras_back_btn.height), 4)

    #Tela de Jogo
    def update_jogo(self):
        vel_fita = 100
        vel_animacao = 500

        #Movimento das fitas
        for fita in self.fitas:
            if fita["ativa"] and fita["sprite"].x > 40:
                fita["sprite"].x -= vel_fita * self.janela.delta_time()
                for slot in fita["slots"]:
                    slot["x"] -= vel_fita * self.janela.delta_time()

        #Input do jogador (clicar nas bases)
        if not self.clicou_base and self.mouse.is_button_pressed(1):
            bases_ativas = self.fitas[self.fita_atual]["bases_disponiveis"]
            espacamento = 20
            largura_total = len(bases_ativas) * (self.nova_base_sprite(bases_ativas[0]).width + espacamento) - espacamento
            pos_x = (self.janela.width - largura_total) / 2
            
            for base in bases_ativas:
                sp_temp = self.nova_base_sprite(base)
                sp_temp.set_position(pos_x, 600)
                if self.mouse.is_over_object(sp_temp):
                    self.clicou_base = True
                    #Encontrar o próximo slot vazio na fita ATUAL
                    fita_a_preencher = self.fitas[self.fita_atual]
                    for slot in fita_a_preencher["slots"]:
                        if not slot["preenchido"] and not slot["animando"]:
                            destino_x = slot["x"] + slot["w"] / 2 - self.nova_base_sprite(base, True).width / 2
                            destino_y = slot["y"] + fita_a_preencher["sprite"].height / 2 - self.nova_base_sprite(base, True).height / 2
                            sprite_anim = self.nova_base_sprite(base, True)
                            sprite_anim.set_position(sp_temp.x, sp_temp.y)
                            slot["animando"] = True
                            self.sprites_animando.append({
                                "sprite": sprite_anim, "destino": (destino_x, destino_y),
                                "slot": slot, "base": base
                            })
                            break #Sai do loop de slots
                    break #Sai do loop de bases
                pos_x += sp_temp.width + espacamento
        
        if not self.mouse.is_button_pressed(1):
            self.clicou_base = False

        #Animação das bases voando para os slots
        for anim in self.sprites_animando[:]:
            sprite = anim["sprite"]
            dest_x, dest_y = anim["destino"]
            dx, dy = dest_x - sprite.x, dest_y - sprite.y
            distancia = (dx ** 2 + dy ** 2) ** 0.5
            velocidade = vel_animacao * self.janela.delta_time()
            
            if distancia < velocidade:
                if not anim["slot"]["preenchido"]:
                    sprite.set_position(dest_x, dest_y)
                    anim["slot"]["sprite"] = sprite
                    anim["slot"]["preenchido"] = True
                    anim["slot"]["base"] = anim["base"]
                    anim["slot"]["animando"] = False
                self.sprites_animando.remove(anim)
            else:
                sprite.x += velocidade * dx / distancia
                sprite.y += velocidade * dy / distancia

        #Avançar para a próxima fita, se a atual estiver completa
        if self.fita_atual < len(self.fitas):
            fita_sendo_preenchida = self.fitas[self.fita_atual]
            if all(s["preenchido"] for s in fita_sendo_preenchida["slots"]):
                if self.fita_atual < len(self.fitas) - 1:
                    self.fita_atual += 1

        #Checar se TODAS as fitas estão completas para finalizar
        if not self.pontuacoes_aplicadas and all(all(s["preenchido"] for s in f["slots"]) for f in self.fitas):
            self.calcular_pontuacao_final()
            self.tela_atual = "fim"

        if self.teclado.key_pressed("ESC"):
            self.resetar_jogo()

    def draw_jogo(self):
        #Desenhar fitas e slots
        for fita in self.fitas:
            fita["sprite"].draw()
            for slot in fita["slots"]:
                if slot["sprite"]:
                    slot["sprite"].set_position(
                        slot["x"] + slot["w"] / 2 - slot["sprite"].width / 2,
                        slot["y"] + fita["sprite"].height / 2 - slot["sprite"].height / 2
                    )
                    slot["sprite"].draw()
                #Feedback visual de acerto/erro
                if slot["flash"] > 0:
                    color = (0, 255, 0) if slot["correto"] else (255, 0, 0)
                    if slot["sprite"]:
                        rect_info = (slot["sprite"].x, slot["sprite"].y, slot["sprite"].width, slot["sprite"].height)
                        pygame.draw.rect(self.janela.screen, color, rect_info, 4)
                    slot["flash"] -= 1
        
        #Desenhar bases clicáveis na parte inferior
        if self.fita_atual < len(self.fitas):
            bases_ativas = self.fitas[self.fita_atual]["bases_disponiveis"]
            espacamento = 20
            largura_total = len(bases_ativas) * (self.nova_base_sprite(bases_ativas[0]).width + espacamento) - espacamento
            pos_x = (self.janela.width - largura_total) / 2
            for base in bases_ativas:
                sp = self.nova_base_sprite(base)
                sp.set_position(pos_x, 600)
                sp.draw()
                if self.mouse.is_over_object(sp):
                    pygame.draw.rect(self.janela.screen, (120, 255, 180), (sp.x, sp.y, sp.width, sp.height), 2)
                pos_x += sp.width + espacamento
        
        #Desenhar sprites em animação
        for anim in self.sprites_animando:
            anim["sprite"].draw()
            
        #HUD (Pontuação e FPS)
        self.janela.draw_text(f"Pontos: {self.pontuacao}", self.janela.width - 200, 20, size=25, color=(0, 255, 255), bold=True)
        self.janela.draw_text(f"FPS: {self.fps}", 20, 20, size=1, color=(120, 255, 120))
        self.janela.draw_text(f"Dica: {self.curiosidade_atual}", 80, HEIGHT - 40, size=22, color=(180, 180, 255))
    
    def calcular_pontuacao_final(self):
        """Calcula a pontuação com base nas combinações de bases e códons."""
        self.pontuacoes_aplicadas = True
        self.combo = 0
        
        #Checagem de complementaridade entre as fitas
        for idx_fita in range(1, len(self.fitas)):
            fita_molde = self.fitas[idx_fita-1]
            fita_preenchida = self.fitas[idx_fita]
            for i in range(len(fita_preenchida["slots"])):
                base_molde = fita_molde["slots"][i]["base"]
                base_jogador = fita_preenchida["slots"][i]["base"]
                
                correto = False
                #Regra para DNA -> DNA (fita 0 -> fita 1)
                if idx_fita == 1:
                    correto = (
                        (base_molde == "A" and base_jogador == "T") or
                        (base_molde == "T" and base_jogador == "A") or
                        (base_molde == "C" and base_jogador == "G") or
                        (base_molde == "G" and base_jogador == "C")
                    )
                #Regra para DNA -> RNA (fita 1 -> fita 2 no modo difícil)
                elif idx_fita == 2 and self.modo_jogo == "difícil":
                     correto = (
                        (base_molde == "A" and base_jogador == "U") or
                        (base_molde == "T" and base_jogador == "A") or
                        (base_molde == "C" and base_jogador == "G") or
                        (base_molde == "G" and base_jogador == "C")
                    )
                
                fita_preenchida["slots"][i]["correto"] = correto
                fita_preenchida["slots"][i]["flash"] = 30 #Duração do flash
                if correto:
                    self.pontuacao += 10
                    self.combo += 1
                    if self.combo >= 3: #Bônus de combo
                        self.pontuacao += 30
                        self.combo = 0
                        fita_preenchida["slots"][i]["flash"] = 60 #Flash maior para combo
                else:
                    self.pontuacao = max(0, self.pontuacao - 5)
                    self.combo = 0

        #Checagem de bônus de códons (apenas na fita de RNA do modo difícil)
        if self.modo_jogo == "difícil":
            seq = ''.join([slot["base"] for slot in self.fitas[2]["slots"] if slot["base"]])
            codons = [seq[i:i+3] for i in range(0, len(seq) - len(seq) % 3, 3)]
            for idx, c in enumerate(codons):
                if c == "AUG":
                    self.pontuacao += 50
                    self.codons_bkp.append((idx * 3, c, "início"))
                elif c in ["UAA", "UAG", "UGA"]:
                    self.pontuacao += 50
                    self.codons_bkp.append((idx * 3, c, "parada"))
        
        self.tempo_fim = time.time() #Inicia o timer para a tela de fim de jogo

    #Tela de Fim
    def update_fim(self):
        self.salvar_score() #Tenta salvar o score (só salva uma vez)
        
        #Delay para evitar que o jogador saia da tela instantaneamente
        if time.time() - self.tempo_fim > 1.5:
            if self.teclado.key_pressed("RETURN"):
                self.resetar_jogo()
            if self.teclado.key_pressed("ESC"):
                self.rodando = False

    def draw_fim(self):
        self.janela.draw_text("FIM DE JOGO", WIDTH / 2 - 150, 150, size=42, color=(0, 255, 255), bold=True)
        texto_pontuacao = f"Sua Pontuação Final: {self.pontuacao}"
        self.janela.draw_text(texto_pontuacao, WIDTH / 2 - 220, 230, size=38, color=(0, 255, 255), bold=True)
        
        if self.codons_bkp:
            codons_str = " | ".join([f"{c[1]} ({c[2]})" for c in self.codons_bkp])
            self.janela.draw_text(f"Códons Bônus: {codons_str}", WIDTH / 2 - 250, 290, size=28, color=(255, 255, 120))

        self.janela.draw_text("     Pressione ENTER para voltar ao menu", WIDTH / 2 - 220, 360, size=28, color=(180, 255, 255))

        
        self.janela.draw_text(f"Dica: {self.curiosidade_atual}", 80, HEIGHT - 40, size=22, color=(180, 180, 255))

    #Loop Principal
    def run(self):
        """O loop principal do jogo que controla a atualização e o desenho."""
        while self.rodando:
            self.update()
            self.draw()

if __name__ == "__main__":
    #Garante que a pasta 'assets' existe
    if not os.path.isdir("assets"):
        print("ERRO: A pasta 'assets' não foi encontrada. Certifique-se de que as imagens estão dentro de uma pasta chamada 'assets'.")
        time.sleep(4)
        exit(1)
        
    jogo = Game()
    jogo.run()
